@using WebView.Areas.BanHangOnline.HoangDTO.Resp
@{
    ViewData["Title"] = "Chi tiết sản phẩm";
    var spChiTiet = ViewData["sanphamchitiet"] as ChiTietSanPhamResp;
    decimal TinhPhanTramGiamGia(decimal? giaBanDau, decimal? giaBan)
    {
        return Math.Round((decimal)(((giaBanDau - giaBan) / giaBanDau) * 100));
    }
}
<style>
   
    .content {
        padding: 0 147px;
    }

    #toast-container {
        right: 0;
    }
    .slider-for img {
        width: 100%;
        height: auto;
    }

    .slider-nav img {
        border: 2px solid transparent;
        cursor: pointer;
        width: 60%;
    }

    .slider-nav .slick-current img {
        border-color: #007bff;
        /* Màu viền cho ảnh đang chọn */
    }

    .slider-for img {
        width: 100%;
        height: auto;
        transition: transform 0.5s ease;
        object-fit: cover;
    }

    .slider-for:hover img {
        transform: scale(1.5);
        cursor: pointer;
    }

    /*  */
    .product-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        background-color: #f9f9f9;
    }


    .color-options input {
        display: none;
    }

    .color-options label {
        display: inline-block;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: 2px solid #ccc;
        margin-right: 8px;
        cursor: pointer;
    }

    .color-options input:checked+label {
        border-color: yellow;
    }

    .color-black {
        background-color: black;
    }

    .color-purple {
        background-color: #dda0dd;
    }

    .size-options input {
        display: none;
    }

    .size-options label {
        display: inline-block;
        padding: 8px 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 8px;
        font-size: 14px;
    }

    .size-options input:checked+label {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }

    .product-name {
        display: block;
        margin: 0 0 4px;
        font-weight: 500;
        font-size: 18px;
        line-height: 20px;
    }

    .price-box {
        flex-wrap: wrap;
        display: flex;
        align-items: center;
        width: 100%;
    }

    .normal-price {
        width: 100%;
        order: -1;
    }

    .price {
        color: #333F48;
        font-weight: 700;
        font-size: 20px;
        line-height: 30px;
        align-items: center;
        text-align: center;
    }

    .price-percent {
        color: #DA291C;
        font-weight: 400;
        font-size: 14px;
        line-height: 20px;
        order: 2;
    }

    .old-price {
        margin-right: 6px;
        font-weight: 400;
        font-size: 14px;
        line-height: 20px;
        order: 1;
        text-decoration: line-through;
    }
</style>
<style>
    
    .box{
        padding: 10px 20px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0px -5px 10px rgba(204, 204, 204, 0.5), 0px 5px 10px rgba(204, 204, 204, 0.5);
        transition: box-shadow 0.3s ease-in-out;
        /* align-items: center;
        justify-content: center;
        font-size: 18px;
        font-weight: bold; */
        margin: 50px auto;
        /* text-align: center; */
    }
    .box:hover{
            box-shadow: 0px -8px 15px rgba(204, 204, 204, 0.8), 0px 8px 15px rgba(204, 204, 204, 0.8);
    }

    .product-slider {
        margin: 25px auto;
    }
    .product-item {
        text-align: center;
        padding: 10px;
    }

    .product-item-name {
        display: flex;
        color: #333f48;
        font-weight: 700;
        font-size: 16px;
        line-height: 1.43;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
        .product-item img {
            width: 100%;
            border-radius: 8px;
        }

    .product-item-price{
        width: 100%;
        display: block;
        font-weight: 700;
        font-size: 14px;
        line-height: 22px;
        display: block;
        margin-bottom: 0;
        margin-left: 0;
        display: flex;
        justify-content: start;
    }
    .slick-prev, .slick-next {
        font-size: 24px;
        color: black;
    }
    /* Tùy chỉnh vị trí mũi tên */
    .custom-prev, .custom-next {
        position: absolute;
        top: 40%;
        background: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        font-size: 24px;
        padding: 10px;
        cursor: pointer;
        z-index: 100;
        transition: 0.3s;
    }

    .custom-prev {
        left: -40px;
    }

    .custom-next {
        right: -45px;
    }

        /* Hiệu ứng hover */
        .custom-prev:hover, .custom-next:hover {
            background: black;
        }
</style>
<style>
    .star-rating .fa-star {
        color: #ddd;
    }

        .star-rating .fa-star.checked {
            color: #f5c518;
        }

    .review-image {
        max-width: 100px;
        height: auto;
        margin: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .filter-btn {
        margin: 5px;
    }

        .filter-btn.active {
            background-color: #dc3545;
            color: white;
        }
</style>
<div class="toast-container" id="toast-container"></div>
<div class="content mt-5">
    <!-- Slider chính -->
    <div class="row box">
        @if (spChiTiet != null && spChiTiet.SanPham.Id != null)
        {
            <div class="col-7 row">
                <div class="slider-for col-9">
                    @foreach (var item in spChiTiet.SanPham.ListHinHAnh)
                    {
                      <div>
                        <img src="@item.Url" alt="@spChiTiet?.SanPham?.Ten img" class="zoom-image">
                    </div>  
                    }
                    
                </div>

                <!-- Slider điều hướng -->
                <div class="slider-nav mt-4 col-3">
                    @foreach (var item in spChiTiet.SanPham.ListHinHAnh)
                    {
                      <div>
                        <img src="@item.Url" alt="@spChiTiet?.SanPham?.Ten img">
                    </div>  
                    }
                </div>
            </div>
            <div class="col-5">
                <div class="container ">
                    <div class="product-card">
                        <input type="text" name="Id" value="@spChiTiet.SanPham.Id" Id="SanPhamChiTiet" hidden/>
                        <h1 class="mb-3 product-name">@spChiTiet?.SanPham?.Ten</h1>
                        <div class="price-box mb-3">
                            <span class="normal-price">
                                <span class="price">@spChiTiet?.SanPham?.GiaBan vnd</span>
                            </span>
                            @if (spChiTiet.SanPham.GiaBanDau != spChiTiet.SanPham.GiaBan)
                            {
                                <span class="old-price">
                                    @spChiTiet?.SanPham?.GiaBanDau vnd
                                </span>
                                <span class="price-percent">-@(TinhPhanTramGiamGia(spChiTiet?.SanPham?.GiaBanDau, spChiTiet?.SanPham?.GiaBan))%</span>
                            }
                            
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Chọn màu sắc:</strong></label>
                            <div class="color-options">
                                @if (spChiTiet.MauSacResps != null)
                                {
                                    int id = (int)spChiTiet.MauSacResps.First().Id;
                                    @foreach (var ms in spChiTiet.MauSacResps)
                                    {
                                        if (id == ms.Id)
                                        {
                                            <input type="radio" id="color-@ms.Id" name="color" value=@(ms.Id) checked>
                                            <label for="color-@ms.Id" style="background-color: @ms.MaHex.Replace(" ","")" onclick="fetchProductDetails(@ms.Id)"></label>
                                        }
                                        else
                                        {
                                            <input type="radio" id="color-@ms.Id" name="color" value=@(ms.Id)>
                                            <label for="color-@ms.Id" style="background-color: @ms.MaHex.Replace(" "," ")" onclick="fetchProductDetails(@ms.Id)"></label>
                                        }
                                    
                                    }
                                }
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Chọn kích cỡ:</strong></label>
                            <div class="size-options d-flex justify-content-start flex-wrap gap-1">
                                @if (spChiTiet.KichThuocResps != null)
                                {
                                    int id = (int)spChiTiet.MauSacResps.First().Id;
                                    @foreach (var kt in spChiTiet.KichThuocResps)
                                    {
                                            if (id == kt.Id_MauSac)
                                            {
                                                <input type="radio" id="size-@kt.Id" name="size" value="@kt.Id">
                                                 <label for="size-@kt.Id">@kt.Ten</label>
                                            }
                                    }
                                }
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Chọn số lượng:</strong></label>
                                <input type="number" class="form-control w-auto" id="soluong" name="soluong" min="1" max="1000" required>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-danger w-100" onclick="SubmitSp()">
                                <i class="fas fa-shopping-cart"></i> Thêm vào giỏ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            
        <div class="col-5">
            <div class="container ">
               <h1 class="text-danger">Sản phẩm hiện hết hàng</h1>
            </div>
        </div>

        }
    </div>
    <div class="mt-5 ">

        <div class="mt-5" id="danhGiaSanPham">
            <h4><strong>Đánh giá từ người mua</strong></h4>
            
            <div style="width: 100%;
                        display: flex;
                        flex-direction: column;
                        align-items: start;
                        gap: 24px;
                        padding: 40px 80px;
                        background-color: #FAFAFA;">

                <!-- Danh sách đánh giá -->
                <div id="review-list" class="mt-4 w-100"></div>
                <div id="loading" class="text-center" style="display: none;">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                </div>
                <div id="no-more-content" class="text-center" style="display: none;width:100%; height:260px">
                    <img src="~/images/rating_img.png"/>
                    <p style="margin-top:20px;">Sản phẩm chưa có đánh giá</p>
                </div>
                <div id="page-loading" class="w-100"></div>
            </div>
        </div>
    </div>

    <div class="mt-5 position-relative">
        <h4><strong>Sản phẩm đã xem</strong></h4>

        <!-- Nút điều hướng (ban đầu ẩn) -->
        <button class="custom-prev d-none">
            <i class="fa-solid fa-arrow-left"></i>
        </button>
        <button class="custom-next d-none">
            <i class="fa-solid fa-arrow-right"></i>
        </button>

        <div class="product-slider box" id="viewed-products">
        </div>
    </div>

    
</div>

<script>
    $(document).ready(function () {
        const pageSize = 5;
        let currentPage = 1;
        let currentFilter = 0; // 0 là tất cả, 1-5 là số sao
        let allReviews = [];

        // Lấy id từ URL
        const urlParams = new URLSearchParams(window.location.search);
        const productId = urlParams.get('id');

        // Gọi API để lấy đánh giá
        fetch(`https://localhost:7043/BanHangOnline/ChiTietSanPham/HienThiDanhGia?id=${productId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data) {
                    localStorage.setItem('productReviews', JSON.stringify(data));
                    allReviews = data;
                    renderReviews();
                }
            })
            .catch(error => {
                console.error('Error fetching reviews:', error);
                const storedReviews = localStorage.getItem('productReviews');
                if (storedReviews) {
                    allReviews = JSON.parse(storedReviews);
                    renderReviews();
                }
            });

        // Xử lý click cho filter buttons
        $(document).on('click', '.filter-btn', function () {
            $('.filter-btn').removeClass('active');
            $(this).addClass('active');
            currentFilter = parseInt($(this).data('rating'));
            currentPage = 1; // Reset về trang 1 khi thay đổi bộ lọc
            $('#review-list').empty();

            // Lấy dữ liệu từ localStorage để đảm bảo đồng bộ
            const storedReviews = localStorage.getItem('productReviews');
            if (storedReviews) {
                allReviews = JSON.parse(storedReviews);
            }
            renderReviews();
        });

        // Xử lý click cho nút phân trang
        $(document).on('click', '.page-link', function (e) {
            e.preventDefault();
            const page = parseInt($(this).data('page'));
            if (page !== currentPage) {
                currentPage = page;
                $('#review-list').empty();
                renderReviews();
            }
        });

        function renderReviews() {
            let filteredReviews = allReviews;

            // Sắp xếp tất cả đánh giá: số sao giảm dần, cùng sao thì thời gian mới nhất lên trước
            filteredReviews.sort((a, b) => {
                if (b.sao !== a.sao) {
                    return b.sao - a.sao; // Số sao giảm dần
                }
                return new Date(b.ngayTao) - new Date(a.ngayTao); // Thời gian mới nhất lên trước
            });

            // Lọc theo số sao nếu có bộ lọc
            if (currentFilter > 0) {
                filteredReviews = filteredReviews.filter(review => review.sao === currentFilter);
            }

            // Phân trang
            const start = (currentPage - 1) * pageSize;
            const end = start + pageSize;
            const reviewsToShow = filteredReviews.slice(start, end);
            const totalFilteredReviews = filteredReviews.length;
            const totalPages = Math.ceil(totalFilteredReviews / pageSize);

            // Tính toán thống kê đánh giá
            const totalReviews = allReviews.length;
            const ratingCounts = {
                5: allReviews.filter(r => r.sao === 5).length,
                4: allReviews.filter(r => r.sao === 4).length,
                3: allReviews.filter(r => r.sao === 3).length,
                2: allReviews.filter(r => r.sao === 2).length,
                1: allReviews.filter(r => r.sao === 1).length
            };
            const averageRating = totalReviews > 0 ?
                (allReviews.reduce((sum, r) => sum + r.sao, 0) / totalReviews).toFixed(1) : 0;

            // Tạo HTML cho rating bars
            const ratingBarsHtml = `
                    <div class="col-md-6">
                        <div class="d-flex align-items-center mb-3">
                            <h3 class="me-2">${averageRating}/5</h3>
                            <div class="star-rating">
                                ${Array(Math.round(averageRating)).fill('<i class="fas fa-star checked"></i>').join('')}
                                ${Array(5 - Math.round(averageRating)).fill('<i class="fas fa-star"></i>').join('')}
                            </div>
                            <span class="ms-2 text-muted">${totalReviews} đánh giá</span>
                        </div>
                        <div class="rating-bars">
                            ${[5, 4, 3, 2, 1].map(star => `
                                <div class="d-flex align-items-center mb-2">
                                    <span>${star} <i class="fas fa-star"></i></span>
                                    <div class="progress flex-grow-1 mx-2">
                                        <div class="progress-bar bg-warning"
                                             role="progressbar"
                                             style="width: ${totalReviews > 0 ? (ratingCounts[star] / totalReviews * 100) : 0}%"
                                             aria-valuenow="${totalReviews > 0 ? (ratingCounts[star] / totalReviews * 100) : 0}"
                                             aria-valuemin="0"
                                             aria-valuemax="100"></div>
                                    </div>
                                    <span>${ratingCounts[star]}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;

            // Thêm nút lọc
            const filterButtonsHtml = `
                    <div class="mt-3">
                        <span>Lọc đánh giá:</span>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 0 ? 'active' : ''}" data-rating="0">Tất cả</button>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 5 ? 'active' : ''}" data-rating="5">5 sao</button>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 4 ? 'active' : ''}" data-rating="4">4 sao</button>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 3 ? 'active' : ''}" data-rating="3">3 sao</button>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 2 ? 'active' : ''}" data-rating="2">2 sao</button>
                        <button class="btn btn-outline-secondary filter-btn ${currentFilter === 1 ? 'active' : ''}" data-rating="1">1 sao</button>
                    </div>
                `;

            // Xóa nội dung cũ và thêm rating bars + filter buttons
            $('#review-list').empty();
            $('#review-list').append(ratingBarsHtml);
            $('#review-list').append(filterButtonsHtml);

            // Hiển thị hoặc ẩn no-more-content
            if (reviewsToShow.length === 0) {
                $('#review-list').append('<p id="no-more-content" class="text-muted">Không có đánh giá nào.</p>');
                $('#page-loading').empty();
                return;
            } else {
                $('#no-more-content').hide();
            }

            // Xử lý từng review
            reviewsToShow.forEach(async (review) => {
                const stars = Array(review.sao).fill('<i class="fas fa-star checked"></i>').join('');
                const date = new Date(review.ngayTao);
                const formattedDate = date.toLocaleDateString('vi-VN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: '2-digit'
                });

                // Tạo HTML cho ảnh (nếu có)
                let imagesHtml = '';
                if (review.hinhanhs && review.hinhanhs.length > 0) {
                    const imagePromises = review.hinhanhs.map(async (imageId) => {
                        try {
                            const response = await fetch(`https://localhost:7043/BanHangOnline/DanhGia/GetImage?id=${imageId}`);
                            if (!response.ok) throw new Error('Failed to fetch image');
                            const blob = await response.blob();
                            const imageUrl = URL.createObjectURL(blob);
                            return `<img src="${imageUrl}" class="review-image" alt="Review Image" style="max-width: 100px; margin: 5px;">`;
                        } catch (error) {
                            console.error(`Error fetching image ${imageId}:`, error);
                            return '';
                        }
                    });

                    const imageTags = await Promise.all(imagePromises);
                    imagesHtml = imageTags.join('');
                }

                const html = `
                        <div class="review-item border-bottom py-3">
                            <div class="d-flex align-items-center mb-2">
                                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2" style="width: 40px; height: 40px;">
                                    ${review.tenKhachHang.charAt(0)}
                                </div>
                                <div>
                                    <strong>${review.tenKhachHang}</strong>
                                    <div class="star-rating">${stars}</div>
                                </div>
                            </div>
                            <p>${review.noiDung}</p>
                            <div class="d-flex flex-wrap">${imagesHtml}</div>
                            <p class="text-muted mt-2">Đã đánh giá ngày: ${formattedDate}</p>
                        </div>`;
                $('#review-list').append(html);
            });

            // Tạo HTML cho phân trang và thêm vào #page-loading
            if (totalPages > 1) {
                let paginationHtml = `
                        <nav aria-label="Page navigation" class="mt-3">
                            <ul class="pagination justify-content-center">
                                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
                                        <span aria-hidden="true">«</span>
                                    </a>
                                </li>
                    `;

                for (let i = 1; i <= totalPages; i++) {
                    paginationHtml += `
                            <li class="page-item ${i === currentPage ? 'active' : ''}">
                                <a class="page-link" href="#" data-page="${i}">${i}</a>
                            </li>
                        `;
                }

                paginationHtml += `
                                <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                    <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
                                        <span aria-hidden="true">»</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    `;
                $('#page-loading').html(paginationHtml);
            } else {
                $('#page-loading').empty();
            }

            

            $('#loading').hide();
        }

        // Xóa localStorage khi chuyển trang
        $(window).on('beforeunload', function () {
            localStorage.removeItem('productReviews');
        });
    });
</script>
<script>

    function getSlick() {
            var productCount = $('.product-item').length;
            if (productCount >= 4) {
                $(".custom-prev, .custom-next").removeClass("d-none"); // Hiện nút điều hướng nếu có 4 sản phẩm trở lên
            }
            $(".product-slider").slick({
                slidesToShow: 4,
                centerMode: false,
                slidesToScroll: 1,
                infinite: productCount >= 4,  // Nếu đủ 4 sản phẩm trở lên thì có loop
                arrows: false,   // Nếu đủ 4 sản phẩm thì có mũi tên
                dots: false
            });

        // Xử lý sự kiện click cho mũi tên tùy chỉnh
        $(".custom-prev").click(function () {
            $(".product-slider").slick("slickPrev");
        });

        $(".custom-next").click(function () {
            $(".product-slider").slick("slickNext");
        });
    }
    function saveProductId() {
        const url = window.location.href;
        const urlParams = new URL(url);
        const productId = urlParams.searchParams.get("id"); // Lấy giá trị 'id' từ URL

        if (!productId) return; // Nếu không có ID thì thoát

        let viewedProducts = JSON.parse(localStorage.getItem("sanphamdaxem")) || [];

        if (!viewedProducts.includes(productId)) {
            viewedProducts.push(productId); // Thêm ID mới vào danh sách
            localStorage.setItem("sanphamdaxem", JSON.stringify(viewedProducts)); // Lưu lại LocalStorage
        }
    }

    function fetchViewedProducts() {
        let viewedProducts = JSON.parse(localStorage.getItem("sanphamdaxem")) || [];

        if (viewedProducts.length === 0) return; // Nếu không có sản phẩm nào đã xem thì thoát

        $.ajax({
            url: "https://localhost:7043/BanHangOnline/ChiTietSanPham/LayDanhSachSanPhamDaXem",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(viewedProducts),
            success: function (response) {
                let htmlContent = "";

                response.data.forEach(product => {
                    htmlContent += `
                       <div class="product-item " >
                            <a href="/BanHangOnline/ChiTietSanPham/GetSanPhamChiTiet?id=${product.id}">
                                <img src="${product.img}" alt="${product.ten}">
                            </a>
                            <a href="/BanHangOnline/ChiTietSanPham/GetSanPhamChiTiet?id=${product.id}">
                                <p class="product-item-name">${product.ten}</p>
                            </a>
                            <span class="product-item-price">${product.giaBan} đ</span>
                        </div>
                    `;
                });

                $("#viewed-products").html(htmlContent); // Hiển thị sản phẩm trong phần tử có id "viewed-products"
                getSlick();
            },
            error: function () {
                console.error("Lỗi khi tải danh sách sản phẩm đã xem.");
            }
        });
    }
        $(document).ready(function () {
            saveProductId();      // Lưu sản phẩm vào LocalStorage
            fetchViewedProducts(); // Lấy danh sách sản phẩm đã xem và hiển thị
        });

</script>
<script defer>
          async function fetchProductDetails(id_mausac) {
                    try {
                        // Gửi yêu cầu GET đến API
                    const response = await fetch(`https://localhost:7043/BanHangOnline/ChiTietSanPham/GetSessionSanPhamChiTiet?id=${id_mausac}`);
            
                        // Kiểm tra nếu API trả về lỗi
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        // Lấy dữ liệu JSON từ API
                        const data = await response.json();

                        // Chọn phần tử có class 'size-options'
                        const ktOptionsContainer = document.querySelector('.size-options');

                        // Xóa nội dung cũ
                        ktOptionsContainer.innerHTML = '';

                        // Lặp qua dữ liệu và tạo cấu trúc HTML
                        data.forEach(item => {
                            const inputId = `size-${item.Id}`;
                            const inputElement = `<input type="radio" id="${inputId}" name="size" value="${item.Id}">`;
                            const labelElement = `<label for="${inputId}">${item.Ten}</label>`;

                            // Thêm cấu trúc HTML vào container
                            ktOptionsContainer.innerHTML += inputElement + labelElement;
                        });
                    } catch (error) {
                        console.error('Lỗi khi gọi API:', error);
                    }
                }
                let inputSoLuong = document.getElementById("soluong");
                inputSoLuong.value = "1";
                inputSoLuong.addEventListener("input", function () {
                    inputSoLuong.value = inputSoLuong.value.replace(/[^0-9]/g, "");
                    // Nếu ô trống, tự động điền số 1
                    if (inputSoLuong.value === "") {
                        inputSoLuong.value = "1";
                    }
                    let value = parseInt(inputSoLuong.value);

                    // Ngăn nhập nhỏ hơn 1 hoặc lớn hơn 1000
                    if (value < 1) {
                        inputSoLuong.value = 1;
                    } else if (value > 1000) {
                        inputSoLuong.value = 1000;
                    }
                });
                // Phương thức gửi dữ liệu
        async function SubmitSp() {
                const selectedColor = document.querySelector('.color-options input[name="color"]:checked');
                const selectedSize = document.querySelector('.size-options input[name="size"]:checked');
                const idSp = document.querySelector('#SanPhamChiTiet');
                let soluongSp = document.getElementById("soluong");
                // Kiểm tra nếu chưa chọn màu sắc hoặc kích thước
                if (!selectedColor || !selectedSize) {
                    alert('Vui lòng chọn màu sắc và kích thước trước khi thêm vào giỏ hàng.');
                    return;
                }
                // Kiểm tra giá trị nhập vào
                if (soluongSp.value < 1) {
                    alert('Vui lòng chọn chọn số lượng >= 1.');
                    return;
                }
                
                // Chuẩn bị model dữ liệu
                const model = {
                    IdSanPham: idSp.value,
                    IdMauSac: selectedColor.value,
                    IdKichThuoc: selectedSize.value,
                    SoLuong: soluongSp.value
                };

                try {
                    // Gửi yêu cầu POST đến API
                    const response = await fetch('https://localhost:7043/BanHangOnline/ChiTietSanPham/PostSanPhamVaoGioHang', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json', // Định nghĩa kiểu dữ liệu JSON
                        },
                        body: JSON.stringify(model) // Chuyển đổi model sang chuỗi JSON
                    });
                    console.log(response);
                    const result = await response.json();
                    // Kiểm tra phản hồi từ server
                    if (result.status == 200) {
                        showToast(result.message,false);
                    } else {
                        showToast(result.message,true);
                    }
                } catch (error) {
                    console.error('Lỗi khi gọi API:', error);
                    showToast('Lỗi',true);
                }
        }
        const toastContainer = document.getElementById('toast-container');
        // Hiển thị thông báo
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${isError ? 'danger' : 'success'} border-0 show`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    `;

            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }
</script>

<script defer>
    document.querySelectorAll('.zoom-image').forEach(function (image) {
        image.addEventListener('mousemove', function (e) {
            const containerRect = image.getBoundingClientRect();
            const offsetX = e.clientX - containerRect.left; // Vị trí x của con trỏ
            const offsetY = e.clientY - containerRect.top;  // Vị trí y của con trỏ

            const originX = (offsetX / containerRect.width) * 100; // Tính tỷ lệ phần trăm
            const originY = (offsetY / containerRect.height) * 100; // Tính tỷ lệ phần trăm

            image.style.transformOrigin = `${originX}% ${originY}%`; // Đặt điểm gốc phóng to
            image.style.transform = 'scale(1.5)'; // Phóng to hình ảnh
        });

        // Khi rời chuột ra khỏi hình ảnh
        image.addEventListener('mouseleave', function () {
            image.style.transform = 'scale(1)'; // Quay lại kích thước ban đầu
        });
    });
</script>
<script defer>
    $(document).ready(function () {
        // Slider chính
        $('.slider-for').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            arrows: false,
            dots:false,
            fade: true,
            accessibility:false,
            asNavFor: '.slider-nav' // Liên kết với slider điều hướng
        });

        // Slider điều hướng
        $('.slider-nav').slick({
            slidesToShow: 3, // Số lượng ảnh hiển thị
            infinite: true,
            slidesToScroll: 1,
            asNavFor: '.slider-for', // Liên kết với slider chính
            dots: false, // Hiển thị dấu chấm điều hướng
            arrows: false,
            // centerMode: true, // Ảnh chính ở giữa
            vertical: true,
            focusOnSelect: true // Nhấp vào thumbnail để chuyển slide
        });
    });

</script>