@{
    Layout = "_LayoutBanTaiQuay";
}

<div class="container-fluid mt-4">
    <div class="row" style="min-height: 90vh;">
        <div class="col-8 position-relative">
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Stt</th>
                            <th>Hình ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Đơn Giá</th>
                            <th>Số lượng</th>
                            <th>Thành tiền</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="cart-list">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-4 bg-white">
            <!-- người bán hàng + thời gian thực -->
            <div class="d-flex mb-2 mt-2 justify-content-between">
                <span>Admin</span>
                <p id="time"></p>
            </div>
            <!-- tìm kiếm khách hàng -->
            <div class="mb-2">
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#timKiemKhachHangModal">
                    Tìm kiếm khách hàng
                </button>

            </div>
            <!-- form tính tiền -->
            <div class="mb-2 position-relative " style="min-height: 85%;">
                    <div class="d-flex mb-2 mt-3 justify-content-between">
                        <input type='text' name="IdKhachHang" id="IdKhachHang" value="0" hidden>
                        <span>Khách hàng:</span>
                        <span id="ten-khach-hang-span">Khách lạ</span>
                        <button type="button" class="btn btn-danger" id="btnKhachHang">Xóa</button>
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Tổng tiền hàng(vnd):</label>
                        <input id="tong-tien-hang" class="form-control" name="TongTienHang" type="text" placeholder="0" disabled>
                    </div>
                    <div class="d-flex mb-2 justify-content-between">
                        <label>Loại thanh toán:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="loaiTienMat"
                                   checked>
                            <label class="form-check-label" for="loaiTienMat">
                                Tiền mặt
                            </label>
                        </div>
                    </div>
                    <div class="d-flex mb-2 justify-content-between">
                        <label>Dịch vụ:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" id="banTaiQuay"
                                   checked>
                            <label class="form-check-label" for="banTaiQuay">
                                Bán tại quầy
                            </label>
                        </div>
                    </div>
                    <div class="mb-2">
                        <label class ="form-label">Khách thanh toán(vnd):</label>
                        <input id="khach-thanh-toan" class="form-control" type="text" name="TongTienKhachThanhToan" placeholder="0" disabled>
                    </div>
                    <div class="d-flex mb-0 bottom-0 position-absolute w-100">
                        <button class="btn btn-primary mx-auto h-auto w-100" onclick="thanhToanHoaDon()">Thanh Toán</button>
                    </div>

            </div>
        </div>
        <!-- Toast container -->
        <div class="toast-container" id="toast-container"></div>
    </div>
</div>

<!-- offcanvas -->
<div class="offcanvas offcanvas-end"  id="offcanvasRight">
    <div class="offcanvas-header">
        <!-- <h1 class="offcanvas-title">Heading</h1> -->
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="d-flex flex-column gap-3">
            <button class="btn btn-light" type="button">Quản lý</button>
            <a class="btn btn-light" href="/Admin">Đăng xuất</a>


        </div>
    </div>
</div>
<!--  -->
<!-- modal tìm kiếm sản phẩm-->
<div>
    <!-- The Modal tim kiem san pham -->
    <div class="modal" id="timKiemSanPhamModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header" style="height: 94px;">
                    <label for="searchInput">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </label>
                    <input type="text" id="searchInput" class="form-control form-input" style="width: 86%;margin-right: 20px;" placeholder="Nhập tên sản phẩm">
                    <button id="searchButton" class="btn btn-primary" style="height: 37px;">Tìm kiếm</button>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Hình ảnh</th>
                                <th>Tên sản phẩm</th>
                                <th>Giá</th>
                                <th>Tồn kho</th>
                                <th>Thêm</th>
                            </tr>
                        </thead>
                        <tbody id="productList">
                            <!-- Nội dung sẽ được tải động -->
                        </tbody>
                    </table>

                    <!-- Pagination -->
                    <div id="pagination"></div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
</div>
<!-- modal tìm kiếm khách hàng -->
<div>
    <!-- The Modal -->
    <div class="modal" id="timKiemKhachHangModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                   @*  <label for="input-search">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </label> *@
                    <input type="text" id="input-search-kh" class="form-control form-input"
                           placeholder="Tìm khách hàng">
                    <button id="timkiemkhachhang" class="btn btn-primary" style="height: 37px;">Tìm kiếm</button>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Tên khách hàng</th>
                                <th>Sdt</th>
                                <th>Email</th>
                                <th>Thêm</th>
                            </tr>
                        </thead>
                        <tbody id="khachHangList">
                           
                        </tbody>
                    </table>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer ">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
</div>
 
<style>
        #pagination a {
            display: inline-block;
            margin: 0 5px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            text-decoration: none;
            color: #007bff;
         }

        #pagination a.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        #pagination a:hover {
            background-color: #ddd;
            border-color: #007bff;
        }

        #toast-container{
            right:0;
        }
        .table-responsive {
            max-height: 900px; /* Chiều cao tối đa của bảng */
            overflow-y: auto;  /* Thanh cuộn dọc */
            border: 1px solid #ddd; /* Đường viền để dễ nhìn */
        }

        .table-responsive thead th {
            position: sticky;
            top: 0;
            background-color: #f8f9fa; /* Làm tiêu đề bảng cố định */
            z-index: 2;
        }
</style>
<script>
    var timeDisplay = document.getElementById("time");


    function refreshTime() {
        var dateString = new Date().toLocaleString("vn-VN", { timeZone: "Asia/Ho_Chi_Minh" });
        var formattedString = dateString.replace(", ", " - ");
        timeDisplay.innerHTML = formattedString;
    }

    setInterval(refreshTime, 1000);

    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const productList = document.getElementById("productList");
    const pagination = document.getElementById("pagination");
    const cartList = document.getElementById('cart-list');
    const toastContainer = document.getElementById('toast-container');

    let currentPage = 1;
    let searchQuery = "";
    let searchQueyryKh = "";
    // Lưu trữ thông tin giỏ hàng
    let cart = [];
    // Fetch Products via API
    let allProduct = [];
    function fetchProducts(query, page) {
        fetch(`/BanTaiQuay/BanNhanh/GetProducts?searchQuery=${encodeURIComponent(query)}&page=${page}`)
            .then(response => response.json())
            .then(data => {
                console.log("Data san pham:", data); // Kiểm tra dữ liệu trả về
                if (data.products && Array.isArray(data.products)) {
                    renderProducts(data.products);
                    renderPagination(data.currentPage, data.totalPages);
                    allProduct = data.products;
                } else {
                    console.error("Dữ liệu sản phẩm không hợp lệ:", data);
                    productList.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
                    pagination.innerHTML = ""; // Xóa pagination nếu không có sản phẩm
                }
            })
            .catch(error => console.error("Lỗi khi fetch sản phẩm:", error));
    }
    // Fetch Khách hàng từ api
    function fetchKhachHang(query) {
        fetch(`/BanTaiQuay/BanNhanh/GetKhachHang?sdt=${encodeURIComponent(query)}`)
            .then(response => response.json())
            .then(data => {
                console.log("Data khach hang:", data); // Kiểm tra dữ liệu trả về
                if (data.khachHangs && Array.isArray(data.khachHangs)) {
                    renderKhachHangs(data.khachHangs);
                } else {
                    console.error("Dữ liệu khach hang không hợp lệ:", data);
                    khachHangTable.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
                }
            })
            .catch(error => console.error("Lỗi khi fetch sản phẩm:", error));
    }
    // Render Product List
    function renderProducts(products) {
        if (!products || !Array.isArray(products)) {
            console.error("Dữ liệu đầu vào không hợp lệ:", products);
            productList.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
            return;
        }
        if (products.length == 0) {
            productList.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
            return;
        }
        productList.innerHTML = products.map(p => {
            str ="";
            if (p.giaban != p.giabandau) {
                str +=`
                    <tr>
                        <td style="display: none;"><input type="text" value="${p.id}" hidden></td>
                        <td><img src="${p.listHinHAnh[0].url}" alt="${p.ten}" width="50"></td>
                        <td>${p.ten} <span class="badge bg-primary">${p.mauSac.ten}</span> <span class="badge bg-info">${p.kichThuoc.ten}</span></td>
                        <td>${p.giaBan.toLocaleString()} vnd <span class="ms-2">${p.giaBanDau.toLocaleString()} vnd</span></td>
                        <td>${p.soLuong}</td>
                        <td><button class="btn btn-primary add-to-cart">+</button></td>
                    </tr>
                `;
            }else{
                str+= `
                    <tr>
                        <td style="display: none;"><input type="text" value="${p.id}" hidden></td>
                        <td><img src="${p.listHinHAnh[0].url}" alt="${p.ten}" width="50"></td>
                        <td>${p.ten} <span class="badge bg-primary">${p.mauSac.ten} </span> <span class="badge bg-info">${p.kichThuoc.ten}</span></td>
                        <td>${p.giaBan.toLocaleString()} vnd</td>
                        <td>${p.soLuong}</td>
                        <td><button class="btn btn-primary add-to-cart">+</button></td>
                    </tr>
                `;
            }
            return str;
           }).join('');
    }
    // Render Khách hàng
    const khachHangTable = document.getElementById("khachHangList");
    let khachhanght = [];
    function renderKhachHangs(khachhangs) {
        if (!khachhangs || !Array.isArray(khachhangs)) {
            console.error("Dữ liệu đầu vào không hợp lệ:", khachhangs);
            khachHangTable.innerHTML = "<tr><td colspan='6'>Không có khách hàng nào được tìm thấy!</td></tr>";
            return;
        }
        if (khachhangs.length == 0) {
            khachHangTable.innerHTML = "<tr><td colspan='6'>Không có khách hàng nào được tìm thấy!</td></tr>";
            return;
        }
        khachHangTable.innerHTML = khachhangs.map(p => {
            khachhanght.push(p);
            str = "";
                str += `
                            <tr>
                                    <td style="display: none;"><input type="text" value="${p.id}" hidden></td>
                                    <td>${p.ten}</td>
                                    <td>${p.sdt}</td>
                                    <td>${p.email}</td>
                                    <td> <button class="btn btn-primary add-kh-to-cart">+</button></td>
                            </tr>
                    `;
           
            return str;
        }).join('');
    }
    // Render Pagination sản phẩm
    function renderPagination(current, total) {
        pagination.innerHTML = "";
        for (let i = 1; i <= total; i++) {
            const pageLink = document.createElement("a");
            pageLink.href = "#";
            pageLink.textContent = i;
            pageLink.classList.add("btn");
            pageLink.classList.add("btn-primary");
            pageLink.className = i === current ? "active" : "";
            pageLink.addEventListener("click", (e) => {
                e.preventDefault();
                currentPage = i;
                fetchProducts(searchQuery, currentPage);
            });
            pagination.appendChild(pageLink);
        }
    }
    
    // Search Event san pham
    searchButton.addEventListener("click", () => {
        searchQuery = searchInput.value;
        currentPage = 1; // Reset to first page
        fetchProducts(searchQuery, currentPage);
    });
    // Search event khach hang
    const searchButtKhachHang = document.getElementById("timkiemkhachhang");
    const inputSearchKhachHang = document.getElementById("input-search-kh");
    searchButtKhachHang.addEventListener("click", () => {
        searchQueyryKh = inputSearchKhachHang.value;
        fetchKhachHang(searchQueyryKh);
    });

     // Xử lý sự kiện khi click vào nút "+"
        productList.addEventListener('click', function (e) {
            if (e.target.classList.contains('add-to-cart')) {
                const row = e.target.closest('tr');
                const productImage = row.querySelector('img').src;
                // const productName = row.cells[1].innerText.trim();
                const productName =  Array.from(row.cells[2].childNodes)
                .filter(node => node.nodeType === Node.TEXT_NODE) // Lọc các node chỉ chứa text
                .map(node => node.textContent.trim()) // Lấy nội dung text và loại bỏ khoảng trắng thừa
                .join(' '); // Gộp các đoạn text lại
                const childrenColor = row.cells[2].childNodes[1].outerHTML;
                const childrenSize = row.cells[2].childNodes[3].outerHTML;
                let productPrice = row.cells[3].textContent.trim().toString();
                productPrice = parseFloat(productPrice.replaceAll('.', '').replaceAll(',', '.').replaceAll('vnd','').trim())
                const productId = row.cells[0].children[0].value;
                const existingProduct = cart.find(item => item.id == productId);
                const totalQuantity = parseInt(row.cells[4].textContent.trim());
                if (existingProduct) {
                     var ishave = allProduct.find(x => x.id == existingProduct.id);
                    if (ishave != null) {
                        if (ishave.soLuong == existingProduct.quantity) {
                            showToast(`Số lượng sản phẩm tối đa. Không thể thêm nữa`, true);
                            return;
                        }
                        existingProduct.quantity++;
                        existingProduct.total = existingProduct.quantity * existingProduct.price;
                        showToast(`Tăng số lượng sản phẩm: ${productName}`);
                        saveHoaDonToSession();
                    } else {

                        existingProduct.quantity++;
                        existingProduct.total = existingProduct.quantity * existingProduct.price;
                        showToast(`Tăng số lượng sản phẩm: ${productName}`);
                        saveHoaDonToSession();
                    }
                } else {
                    cart.push({
                        id: productId,
                        image: productImage,
                        name: productName,
                        size: childrenSize,
                        color: childrenColor,
                        price: productPrice,
                        quantity: 1,
                        totalquantity:totalQuantity,
                        total: productPrice,
                    });
                    showToast(`Thêm sản phẩm: ${productName} thành công!`);
                    saveHoaDonToSession();
                }

                renderCart();
            }
        });
    // Xử lý sự kiện khi click vào nút "+" trong bảng khách hàng
    const tenKH = document.getElementById('ten-khach-hang-span');
    const idKh = document.getElementById('IdKhachHang');
    const btnKhachHang = document.getElementById('btnKhachHang');
    btnKhachHang.style.display = "none";

    khachHangTable.addEventListener('click', function (e) {
        if (e.target.classList.contains('add-kh-to-cart')) {
            const row = e.target.closest('tr');
            tenKH.innerHTML = row.cells[1].outerHTML;
            idKh.value = row.cells[0].children[0].value;
            showToast("Thêm khách hàng thành công")
            btnKhachHang.style.display = "block";
            saveHoaDonToSession();
        }
    });
    btnKhachHang.addEventListener('click', function () {
        idKh.value = "0";
        tenKH.innerHTML = "Khách lạ";
        btnKhachHang.style.display = "none";
        showToast("Xóa khách hàng thành công", true);
        saveHoaDonToSession();
    });
        // Render giỏ hàng ra bảng
        function renderCart() {
            let count = 1;
            cartList.innerHTML = ''; // Xóa nội dung cũ
            cart.forEach((product, index) => {

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td style="display: none;"><input type="text" name="SanPhamChiTiet-Id" value="${product.id}" hidden></td>
                    <td>${count}</td>
                    <td><img src="${product.image}" alt="${product.name}" width="50"></td>
                    <td>${product.name} ${product.color} ${product.size}</td>
                    <td class="price">${product.price.toLocaleString()} vnd</td>
                    <td><input type="number" class="form-control form-control-sm quantity" min="1" value="${product.quantity}" data-index="${index}"></td>
                    <td>${product.total.toLocaleString()} vnd</td>
                    <td><button class="btn btn-danger btn-sm delete-product" data-index="${index}">Xóa</button></td>
                  `;
                count++;
                cartList.appendChild(row);
            });

            attachQuantityChangeEvents();
            attachDeleteEvents();
        }


        // Gắn sự kiện thay đổi số lượng
        function attachQuantityChangeEvents() {
            const quantityInputs = document.querySelectorAll('.quantity');
            quantityInputs.forEach(input => {
                input.addEventListener('input', function () {
                    const index = parseInt(this.getAttribute('data-index'));
                    const newQuantity = parseInt(this.value);
                    
                    if (newQuantity > 0) {
                        if (cart[index].totalquantity < newQuantity){
                            this.value = cart[index].totalquantity;
                            cart[index].quantity = cart[index].totalquantity;
                            cart[index].total = cart[index].totalquantity * cart[index].price;
                            showToast(`Hết hàng`,true);
                        }else{
                            cart[index].quantity = newQuantity;
                            cart[index].total = newQuantity * cart[index].price;
                            showToast(`Cập nhật số lượng: ${cart[index].name}`);
                            

                        }
                    } else {
                        this.value = 1;
                        cart[index].quantity = 1;
                        cart[index].total = 1 * cart[index].price;
                        
                    }
                    renderCart();
                    saveHoaDonToSession();
                });
            });
        }
        // Gắn sự kiện xóa sản phẩm
        function attachDeleteEvents() {
            const deleteButtons = document.querySelectorAll('.delete-product');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const index = parseInt(this.getAttribute('data-index'));

                    const deletedProduct = cart[index].name;
                    cart.splice(index, 1); // Xóa sản phẩm khỏi mảng cart
                    renderCart();
                    showToast(`Đã xóa sản phẩm: ${deletedProduct}`,true);
                calculateTotal();
                    saveHoaDonToSession();
                });
            });
        }

        // Hiển thị thông báo
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${isError ? 'danger' : 'success'} border-0 show`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    `;

            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        //
    function onRowAdded(mutationsList) {
        mutationsList.forEach(mutation => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeName === 'TR') {

                        // Ví dụ: Tự động tính lại tổng tiền khi thêm dòng
                        calculateTotal();
                        saveHoaDonToSession();
                    }
                });
            }
        });
    }

    // Tạo MutationObserver để theo dõi sự thay đổi trong `cart-list`
    const observer = new MutationObserver(onRowAdded);

    // Cấu hình theo dõi sự thay đổi trong các con của `cart-list`
    observer.observe(cartList, {
        childList: true, // Theo dõi khi con của `cart-list` thay đổi
    });

    // Hàm tính tổng tiền (ví dụ minh họa)
    function calculateTotal() {
        let total = 0;

        Array.from(cartList.children).forEach(row => {
            let priceN = row.querySelector('.price')?.textContent.replaceAll('.', '').replaceAll(',', '.');
            const quantity = parseInt(row.querySelector('.quantity')?.value || 0);
            const price = parseFloat(priceN || 0);
            total += quantity * price;
        });
        document.getElementById('tong-tien-hang').value = parseInt(total).toLocaleString();
        document.getElementById('khach-thanh-toan').value = (Math.round(Math.round(total) / 1000) * 1000).toLocaleString();
    }


    const banTaiQuayRadio = document.getElementById('banTaiQuay');
   

    banTaiQuayRadio.addEventListener('click', () => {
        calculateTotal();
    });
    // thay đổi hóa đơn được chọn
    let idHdHienTai = 1;
    function changeHd(id) {
        // thực hiện fill thông tin hóa đơn được click vào các trường dữ liệu
      
        idHdHienTai = id;
        let data = sessionStorage.getItem(id);
        data = JSON.parse(data);
           // thực hiện fill thông tin
        if (data != null) {
             cart = data.lsthoadon;
             idKh.value = data.idkhachang;
             document.getElementById('ten-khach-hang-span').innerHTML = data.tenkhachang;
            if (data.idkhachang != 0) {
                   btnKhachHang.style.display = "block";
             }else{
                btnKhachHang.style.display = "none";
            }
           
            let listCart = cart;
            let idKhachHang = idKh.value;

        }
        renderCart();
        calculateTotal();
    }
    saveHoaDonToSession();
    // Lưu đối tượng vào Session Storage
    function saveHoaDonToSession() {
        const hoadon = {
            idhd: idHdHienTai,
            lsthoadon: cart ?? [],
            idkhachang: idKh.value,
            tongtienhang: parseInt(document.getElementById('tong-tien-hang').value.replaceAll('.','')),
            tongtienthanhtoan: parseInt(document.getElementById('khach-thanh-toan').value.replaceAll('.', '')),
            tenkhachang: document.getElementById('ten-khach-hang-span').innerHTML
        };
        sessionStorage.setItem(idHdHienTai, JSON.stringify(hoadon));
    }
    function thanhToanHoaDon(){
        let data = sessionStorage.getItem(idHdHienTai);
        data = JSON.parse(data);
        // thực hiện fill thông tin
        if (data != null) {
            if (data.lsthoadon.length > 0) { 
                let lstHoaDon = [];
                Array.from(data.lsthoadon).forEach(item => {
                    lstHoaDon.push({
                        id: item.id,
                        quantity: item.quantity,
                        gia : item.price
                    });
                })
                const dataToSend = {
                    idkhachang: data.idkhachang, // Thay bằng ID khách hàng thực tế
                    lsthoadon: lstHoaDon,
                    tongtienhang: data.tongtienhang, // Tổng tiền hàng (tính toán từ danh sách hóa đơn)
                    tongtienthanhtoan: data.tongtienthanhtoan // Tổng tiền thanh toán (sau khi làm tròn hoặc áp dụng khuyến mãi)
                };

                // gửi thanh toán đến api
                fetch('/BanTaiQuay/BanNhanh/PostThanhToanTaiQuay', {
                    method: 'POST', // Phương thức POST
                    headers: {
                        'Content-Type': 'application/json' // Định dạng dữ liệu gửi đi
                    },
                    body: JSON.stringify(dataToSend) // Chuyển object thành JSON
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json(); // Trích xuất dữ liệu JSON từ phản hồi
                    })
                    .then(data => {
                        // Xử lý thành công
                        console.log("Gửi thành công:", data);
                        
                        if(data.status == 200){
                            showToast("Thanh toán thành công!");
                        }else{
                            showToast("Thanh toán thất bại!",false);
                        }
                        const activeHd = document.getElementById(`${idHdHienTai}`);
                        // Kiểm tra xem có tồn tại thẻ <a> không
                        if (activeHd) {
                            // Lấy phần tử <li> chứa thẻ <a>
                            const liElement = activeHd.closest('li');

                            // Kiểm tra và xóa phần tử <li>
                            if (liElement) {
                                liElement.remove();
                                console.log('Đã xóa hóa đơn:', activeHd.id);
                            }
                        }
                        // xóa session của hóa đơn hiện tại
                        sessionStorage.removeItem(idHdHienTai);
                        idKh.value = "0";
                        tenKH.innerHTML = "Khách lạ";
                        btnKhachHang.style.display = "none";
                        cart=[];
                        renderCart();
                        calculateTotal();
                        saveHoaDonToSession();
                    })
                    .catch(error => {
                        // Xử lý lỗi
                        console.error("Gửi thất bại:", error);
                        alert("Có lỗi xảy ra khi thanh toán. Vui lòng thử lại!");
                    });
                }else{
                 showToast("Không có sản phẩm để thanh toán!",false);
                }
        }
    }
</script>
