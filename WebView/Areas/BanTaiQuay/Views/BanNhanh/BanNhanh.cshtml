@{
    Layout = "_LayoutBanTaiQuay";
}

<div class="container-fluid mt-4">
    <div class="row" style="min-height: 90vh;">
        <div class="col-8 position-relative">
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Stt</th>
                            <th>Hình ảnh</th>
                            <th>Tên sản phẩm</th>
                            <th>Đơn Giá</th>
                            <th>Số lượng</th>
                            <th>Thành tiền</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody id="cart-list">
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-4 bg-white">
            <!-- người bán hàng + thời gian thực -->
            <div class="d-flex mb-2 mt-2 justify-content-between">
                <span>Admin</span>
                <p id="time"></p>
            </div>
            <!-- tìm kiếm khách hàng -->
            @* <div class="mb-2">
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#timKiemKhachHangModal">
                    Tìm kiếm khách hàng
                </button>

            </div> *@
            <!-- form tính tiền -->
            <div class="mb-2 position-relative " style="min-height: 85%;">
                <form action="#" id="form-thanh-toan">
                    <div class="d-flex mb-2 mt-3 justify-content-between">
                        <span>Khách hàng</span>
                        <span>Khách lạ</span>
                    </div>
                    <div class="d-flex mb-2 justify-content-between">
                        <span>Tổng tiền hàng</span>
                        <input id="tong-tien-hang" name="TongTienHang" type="text" placeholder="0" disabled>
                    </div>
                    <div class="d-flex mb-2 justify-content-between">
                        <label>Loại thanh toán</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="loaiThanhToan" id="loaiTienMat"
                                   checked>
                            <label class="form-check-label" for="loaiTienMat">
                                Tiền mặt
                            </label>
                        </div>
                    </div>
                    <div class="d-flex mb-2 justify-content-between">
                        <label>Dịch vụ khác</label>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="dichvukhac" id="banTaiQuay"
                                   checked>
                            <label class="form-check-label" for="banTaiQuay">
                                Bán tại quầy
                            </label>
                        </div>
                        @* <div class="form-check">
                            <input class="form-check-input" type="radio" name="dichvukhac" id="giaoTanNoi">
                            <label class="form-check-label " for="giaoTanNoi">
                                Giao tận nơi
                            </label>
                        </div> *@
                    </div>
                    <div class="giao-tan-noi">
                        <div class="mb-2">
                            <label for="province" class="form-label">Tỉnh/Thành phố</label>
                            <select id="province" class="form-select" required>
                                <option value="">Chọn Tỉnh/Thành phố</option>
                            </select>
                        </div>
                        <div class="mb-2">
                            <label for="district" class="form-label">Quận/Huyện</label>
                            <select id="district" class="form-select" required>
                                <option value="">Chọn Quận/Huyện</option>
                            </select>
                        </div>
                        <div class="mb-2">
                            <label for="ward" class="form-label">Phường/Xã</label>
                            <select id="ward" class="form-select" required>
                                <option value="">Chọn Phường/Xã</option>
                            </select>
                        </div>
                        <div class="mb-2">
                            <label for="address" class="form-label">Địa chỉ cụ thể</label>
                            <input type="text" id="address" class="form-control" placeholder="Nhập địa chỉ cụ thể">
                        </div>
                        <div class="mb-2">
                            <label for="shipping-fee" class="form-label">Phí vận chuyển</label>
                            <input type="text" id="shipping-fee" class="form-control" placeholder="0" disabled>
                        </div>
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Khách cần trả</label>
                        <input id="khach-can-tra" class="form-control" type="text" placeholder="0" disabled>
                    </div>
                    <div class="mb-2">
                        <label class ="form-label">Khách thanh toán</label>
                        <input id="khach-thanh-toan" class="form-control" type="text" placeholder="0">
                    </div>
                    <div class="d-flex mb-0 bottom-0 position-absolute w-100">
                        <button class="btn btn-primary mx-auto h-auto w-100">Thanh Toán</button>
                    </div>

                </form>
            </div>
        </div>
        <!-- Toast container -->
        <div class="toast-container" id="toast-container"></div>
    </div>
</div>

<!-- offcanvas -->
<div class="offcanvas offcanvas-end"  id="offcanvasRight">
    <div class="offcanvas-header">
        <!-- <h1 class="offcanvas-title">Heading</h1> -->
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="d-flex flex-column gap-3">
            <button class="btn btn-light" type="button">Quản lý</button>
            <button class="btn btn-light" type="button">Đăng xuất</button>

        </div>
    </div>
</div>
<!--  -->
<!-- modal tìm kiếm sản phẩm-->
<div>
    <!-- The Modal tim kiem san pham -->
    <div class="modal" id="timKiemSanPhamModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header" style="height: 94px;">
                    <label for="searchInput">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </label>
                    <input type="text" id="searchInput" class="form-control form-input" style="width: 86%;margin-right: 20px;" placeholder="Nhập tên sản phẩm">
                    <button id="searchButton" class="btn btn-primary" style="height: 37px;">Tìm kiếm</button>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Hình ảnh</th>
                                <th>Tên sản phẩm</th>
                                <th>Giá</th>
                                <th>Tồn kho</th>
                                @* <th>Khách đặt</th> *@
                                <th>Thêm</th>
                            </tr>
                        </thead>
                        <tbody id="productList">
                            <!-- Nội dung sẽ được tải động -->
                        </tbody>
                    </table>

                    <!-- Pagination -->
                    <div id="pagination"></div>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
</div>
<!-- modal tìm kiếm khách hàng -->
<div>
    <!-- The Modal -->
    <div class="modal" id="timKiemKhachHangModal">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <label for="input-search">
                        <i class="fa-solid fa-magnifying-glass"></i>
                    </label>
                    <input type="text" id="input-search" class="form-control form-input"
                           placeholder="Tìm khách hàng">
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Tên khách hàng</th>
                                <th>Sdt</th>
                                <th>Thêm</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Nguyễn Hoàng</td>
                                <td>029392831</td>
                                <td> <button class="btn btn-primary"><i class="fa-solid fa-plus"></i></button></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer ">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>

            </div>
        </div>
    </div>
</div>
 
<style>
        #pagination a {
            display: inline-block;
            margin: 0 5px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            text-decoration: none;
            color: #007bff;
         }

        #pagination a.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        #pagination a:hover {
            background-color: #ddd;
            border-color: #007bff;
        }

        #toast-container{
            right:0;
        }
        .table-responsive {
            max-height: 900px; /* Chiều cao tối đa của bảng */
            overflow-y: auto;  /* Thanh cuộn dọc */
            border: 1px solid #ddd; /* Đường viền để dễ nhìn */
        }

        .table-responsive thead th {
            position: sticky;
            top: 0;
            background-color: #f8f9fa; /* Làm tiêu đề bảng cố định */
            z-index: 2;
        }
</style>
<script>
    var timeDisplay = document.getElementById("time");


    function refreshTime() {
        var dateString = new Date().toLocaleString("vn-VN", { timeZone: "Asia/Ho_Chi_Minh" });
        var formattedString = dateString.replace(", ", " - ");
        timeDisplay.innerHTML = formattedString;
    }

    setInterval(refreshTime, 1000);

    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const productList = document.getElementById("productList");
    const pagination = document.getElementById("pagination");
    const cartList = document.getElementById('cart-list');
    const toastContainer = document.getElementById('toast-container');

    let currentPage = 1;
    let searchQuery = "";
    // Lưu trữ thông tin giỏ hàng
    let cart = [];
    // Fetch Products via API
    function fetchProducts(query, page) {
        fetch(`BanNhanh/GetProducts?searchQuery=${encodeURIComponent(query)}&page=${page}`)
            .then(response => response.json())
            .then(data => {
                console.log("Data từ API:", data); // Kiểm tra dữ liệu trả về
                if (data.products && Array.isArray(data.products)) {
                    renderProducts(data.products);
                    renderPagination(data.currentPage, data.totalPages);
                } else {
                    console.error("Dữ liệu sản phẩm không hợp lệ:", data);
                    productList.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
                    pagination.innerHTML = ""; // Xóa pagination nếu không có sản phẩm
                }
            })
            .catch(error => console.error("Lỗi khi fetch sản phẩm:", error));
    }
    
    // Render Product List
    function renderProducts(products) {
        if (!products || !Array.isArray(products)) {
            console.error("Dữ liệu đầu vào không hợp lệ:", products);
            productList.innerHTML = "<tr><td colspan='6'>Không có sản phẩm nào được tìm thấy!</td></tr>";
            return;
        }

        productList.innerHTML = products.map(p => `
                <tr>
                    <td><img src="${p.hinhAnh}" alt="${p.ten}" width="50"></td>
                    <td>${p.ten}</td>
                    <td>${p.gia.toLocaleString()} vnđ</td>
                    <td>${p.soLuong}</td>
                    <td><button class="btn btn-primary add-to-cart">+</button></td>
                </tr>
            `).join('');
    }

    // Render Pagination
    function renderPagination(current, total) {
        pagination.innerHTML = "";
        for (let i = 1; i <= total; i++) {
            const pageLink = document.createElement("a");
            pageLink.href = "#";
            pageLink.textContent = i;
            pageLink.classList.add("btn");
            pageLink.classList.add("btn-primary");
            pageLink.className = i === current ? "active" : "";
            pageLink.addEventListener("click", (e) => {
                e.preventDefault();
                currentPage = i;
                fetchProducts(searchQuery, currentPage);
            });
            pagination.appendChild(pageLink);
        }
    }

    // Search Event
    searchButton.addEventListener("click", () => {
        searchQuery = searchInput.value;
        currentPage = 1; // Reset to first page
        fetchProducts(searchQuery, currentPage);
    });

     // Xử lý sự kiện khi click vào nút "+"
        productList.addEventListener('click', function (e) {
            if (e.target.classList.contains('add-to-cart')) {
                const row = e.target.closest('tr');
                const productImage = row.querySelector('img').src;
                const productName = row.cells[1].textContent.trim();
                let productPrice = row.cells[2].textContent.trim().toString();
                const productKey = productName;
                productPrice = parseFloat(productPrice.replaceAll('.','').replaceAll(',','.'));
                const existingProduct = cart.find(item => item.name === productKey);

                if (existingProduct) {
                    existingProduct.quantity++;
                    existingProduct.total = existingProduct.quantity * existingProduct.price;
                    showToast(`Tăng số lượng sản phẩm: ${productName}`);
                } else {
                    cart.push({
                        image: productImage,
                        name: productKey,
                        price: productPrice,
                        quantity: 1,
                        total: productPrice,
                    });
                    showToast(`Thêm sản phẩm: ${productName} thành công!`);
                }

                renderCart();
            }
        });

        // Render giỏ hàng ra bảng
        function renderCart() {
            let count = 1;
            cartList.innerHTML = ''; // Xóa nội dung cũ
            cart.forEach((product, index) => {

                const row = document.createElement('tr');
                row.innerHTML = `
                 <td>${count}</td>
                <td><img src="${product.image}" alt="${product.name}" width="50"></td>
                <td>${product.name}</td>
                <td class="price">${product.price.toLocaleString()} vnđ</td>
                <td><input type="number" class="form-control form-control-sm quantity" min="1" value="${product.quantity}" data-index="${index}"></td>
                <td>${product.total.toLocaleString()} vnđ</td>
                <td><button class="btn btn-danger btn-sm delete-product" data-index="${index}">Xóa</button></td>
                  `;
                count++;
                cartList.appendChild(row);
            });

            attachQuantityChangeEvents();
            attachDeleteEvents();
        }


        // Gắn sự kiện thay đổi số lượng
        function attachQuantityChangeEvents() {
            const quantityInputs = document.querySelectorAll('.quantity');
            quantityInputs.forEach(input => {
                input.addEventListener('input', function () {
                    const index = parseInt(this.getAttribute('data-index'));
                    const newQuantity = parseInt(this.value);

                    if (newQuantity > 0) {
                        cart[index].quantity = newQuantity;
                        cart[index].total = newQuantity * cart[index].price;
                        renderCart();
                        showToast(`Cập nhật số lượng: ${cart[index].name}`);
                    } else {
                        showToast('Số lượng không hợp lệ!', true);
                    }
                });
            });
        }
        // Gắn sự kiện xóa sản phẩm
        function attachDeleteEvents() {
            const deleteButtons = document.querySelectorAll('.delete-product');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const index = parseInt(this.getAttribute('data-index'));

                    const deletedProduct = cart[index].name;
                    cart.splice(index, 1); // Xóa sản phẩm khỏi mảng cart
                    renderCart();
                    showToast(`Đã xóa sản phẩm: ${deletedProduct}`,true);
                });
            });
        }

        // Hiển thị thông báo
        function showToast(message, isError = false) {
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-bg-${isError ? 'danger' : 'success'} border-0 show`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                    `;

            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.remove();
            }, 3000);
        }

        //
    function onRowAdded(mutationsList) {
        mutationsList.forEach(mutation => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(node => {
                    if (node.nodeName === 'TR') {

                        // Ví dụ: Tự động tính lại tổng tiền khi thêm dòng
                        calculateTotal();
                    }
                });
            }
        });
    }

    // Tạo MutationObserver để theo dõi sự thay đổi trong `cart-list`
    const observer = new MutationObserver(onRowAdded);

    // Cấu hình theo dõi sự thay đổi trong các con của `cart-list`
    observer.observe(cartList, {
        childList: true, // Theo dõi khi con của `cart-list` thay đổi
    });

    // Hàm tính tổng tiền (ví dụ minh họa)
    function calculateTotal() {
        let total = 0;

        Array.from(cartList.children).forEach(row => {
            let priceN = row.querySelector('.price')?.textContent.replaceAll('.', '').replaceAll(',', '.');
            const quantity = parseInt(row.querySelector('.quantity')?.value || 0);
            const price = parseFloat(priceN || 0);
            total += quantity * price;
        });
        document.getElementById('tong-tien-hang').value = parseInt(total);
        document.getElementById('khach-can-tra').value = parseInt(total);
    }
    // document.getElementById('giaoTanNoi').check


    const token = '3ca6ba1b-b145-11ef-8350-bab7316192b7';
    const shopId = 5497668;
    const giaoTanNoiRadio = document.getElementById('giaoTanNoi');
    const banTaiQuayRadio = document.getElementById('banTaiQuay');
    const giaoTanNoiDiv = document.querySelector('.giao-tan-noi');
    const provinceSelect = document.getElementById('province');
    const districtSelect = document.getElementById('district');
    const wardSelect = document.getElementById('ward');
    const shippingFeeInput = document.getElementById('shipping-fee');
    document.querySelector('.giao-tan-noi').style.display = 'none';
    giaoTanNoiRadio.addEventListener('click', () => {
        giaoTanNoiDiv.style.display = 'block';
    });

    banTaiQuayRadio.addEventListener('click', () => {
        calculateTotal();
        provinceSelect.selectedIndex = 0;
        districtSelect.selectedIndex = 0;
        wardSelect.selectedIndex = 0;
        shippingFeeInput.value = '0';
        giaoTanNoiDiv.style.display = 'none';
    });
    // Fetch provinces
    function fetchProvinces() {
        fetch('https://online-gateway.ghn.vn/shiip/public-api/master-data/province', {
            headers: {
                'Content-Type': 'application/json',
                'Token': token
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    provinceSelect.innerHTML = `<option value="">Chọn Tỉnh/Thành phố</option>`;
                    data.data.forEach(province => {
                        provinceSelect.innerHTML += `<option value="${province.ProvinceID}">${province.ProvinceName}</option>`;
                    });
                }
            })
            .catch(error => console.error('Error fetching provinces:', error));
    }

    // Fetch districts based on province
    provinceSelect.addEventListener('change', function () {
        const provinceId = this.value;

        if (!provinceId) return;

        fetch('https://online-gateway.ghn.vn/shiip/public-api/master-data/district', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Token': token
            },
            body: JSON.stringify({ province_id: parseInt(provinceId) })
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    districtSelect.innerHTML = `<option value="">Chọn Quận/Huyện</option>`;
                    data.data.forEach(district => {
                        districtSelect.innerHTML += `<option value="${district.DistrictID}">${district.DistrictName}</option>`;
                    });
                }
            })
            .catch(error => console.error('Error fetching districts:', error));
    });

    // Fetch wards based on district
    districtSelect.addEventListener('change', function () {
        const districtId = this.value;

        if (!districtId) return;

        fetch('https://online-gateway.ghn.vn/shiip/public-api/master-data/ward', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Token': token
            },
            body: JSON.stringify({ district_id: parseInt(districtId) })
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    wardSelect.innerHTML = `<option value="">Chọn Phường/Xã</option>`;
                    data.data.forEach(ward => {
                        wardSelect.innerHTML += `<option value="${ward.WardCode}">${ward.WardName}</option>`;
                    });
                }
            })
            .catch(error => console.error('Error fetching wards:', error));
    });

    // Calculate shipping fee
    wardSelect.addEventListener('change', function (event) {
        event.preventDefault();

        const districtId = districtSelect.value;
        const wardCode = wardSelect.value;
        const address = document.getElementById('address').value;

        if (!districtId || !wardCode) {
            alert('Vui lòng nhập đầy đủ thông tin giao hàng!');
            return;
        }

        const requestData = {
            "service_type_id": 5,
            "from_district_id": 3440,
            "from_ward_code": "13010",
            "to_district_id": parseInt(districtId),
            "to_ward_code": `${wardCode}`,
            "weight": 100,
            "insurance_value": 0,
            "coupon": null,
            "items": [
                {
                    "name": "TEST1",
                    "quantity": 1,
                    "height": 100,
                    "weight": 100,
                    "length": 100,
                    "width": 100
                }
            ]
        };

        fetch('https://online-gateway.ghn.vn/shiip/public-api/v2/shipping-order/fee', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Token': token,
                'ShopId': shopId
            },
            body: JSON.stringify(requestData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    shippingFeeInput.value = parseInt(data.data.total * 0.03) || 0;
                    document.getElementById('khach-can-tra').value = parseInt(document.getElementById('khach-can-tra')?.value || 0) + parseInt(data.data.total * 0.03);
                } else {
                    alert('Không thể tính phí vận chuyển!');
                }
            })
            .catch(error => console.error('Error calculating shipping fee:', error));
    });

    // Fetch provinces on load
    fetchProvinces();

</script>
